package main

import (
	"encoding/binary"
	"fmt"
	"reflect"
	"testing"

	r255 "github.com/gtank/ristretto255"
	"golang.org/x/crypto/sha3"
)

func int32ToScalar(bl int64) (*r255.Element, error) {

	blslice := make([]byte, 64)
	binary.LittleEndian.PutUint64(blslice, uint64(bl))

	intScalar := r255.NewElement().FromUniformBytes(blslice)

	return intScalar, nil
}

// TestGenerateBasePair generates a base keypair with using a static scalar
func TestGenerateBasePair(t *testing.T) {

	g := r255.NewElement()
	gBasePoint := g.Base() //get the basepoint (g)

	//get the bytecode of the basepoint (32 bytes)
	enc := gBasePoint.Encode([]byte{})
	gBasePointBytes := []byte{}
	copy(gBasePointBytes[:], enc)

	//get the sha3-512 of the basepoint bytes (64 bytes)
	shaBasePoint := sha3.Sum512(gBasePointBytes)

	//use the FromUniformBytes function to reduce 64 bytes to 32 bytes
	hBasePoint := r255.NewElement()
	hBasePoint.FromUniformBytes(shaBasePoint[:])

	//get the bytecode of generated (h)
	hByteCode := hBasePoint.Encode([]byte{})

	fmt.Println("New hBasePoint Bytecode:", hByteCode)

	hGeneratedByRust := []byte{140, 146, 64, 180, 86, 169, 230, 220, 101, 195, 119, 161, 4, 141, 116, 95, 148, 160, 140, 219, 127, 68, 203, 205, 123, 70, 243, 64, 72, 135, 17, 52}
	fmt.Println(reflect.DeepEqual(hByteCode, hGeneratedByRust))
	if reflect.DeepEqual(hByteCode, hGeneratedByRust) == false {
		t.Errorf("hBasePoint is not equal to the byte array generated by dalek-rust = %d;", hGeneratedByRust)
	}
}

func TestFromUniformBytes(t *testing.T) {

	blslice := make([]byte, 64)
	binary.LittleEndian.PutUint64(blslice, uint64(41000))

	uniformBytes := r255.NewElement().FromUniformBytes(blslice)

	fmt.Println(uniformBytes)

	uniformBytesCode := uniformBytes.Encode([]byte{})
	fmt.Println("New Bytecode:", uniformBytesCode)

}
